{
  "name": "ble-ble113a",
  "version": "0.0.28",
  "description": "Library to run the Bluetooth BLE113 Tessel Module.",
  "main": "index.js",
  "scripts": {
    "test": "node test/comprehensive.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/beta.git"
  },
  "author": {
    "name": "Jon McKay",
    "email": "jon@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "directories": {
    "example": "examples"
  },
  "keywords": [
    "tessel",
    "bluetooth",
    "ble",
    "ble113"
  ],
  "dependencies": {
    "bglib": "*",
    "async": "*"
  },
  "hardware": {
    "./firmware_update": false,
    "./examples": false
  },
  "readme": "#Bluetooth Low Energy\nDriver for the ble-ble113 Tessel Bluetooth Low Energy module ([BlueGiga BLE113](http://www.mouser.com/ds/2/52/BLE113_Datasheet-224874.pdf)).\n\n##Under Development\n\nThe BLE Library is still under heavy development and may have bugs.\n\nYou can add more functionality if you want to look at the [BlueGiga BLE113 Datasheet](http://www.bluegiga.com/en-US/products/bluetooth-4.0-modules/ble113-bluetooth--smart-module/documentation/). You'll have to make an account on their website.\n\nEmail jon@technical.io with any questions/concerns\n\n##Installation\n```sh\nnpm install ble-ble113a\n```\n\nIf you have Tessel V2 (TM-00-02) or later, you can use module port a, b, or d. We'll be implementing software uart on port c in the near future. \n\n##Examples\n### Master - Subscribing to updates from a peripheral with known profile (example with bluetooth-enabled multimeter, mooshimeter).\n\n```js\nvar tessel = require('tessel');\nvar blePort = tessel.port('a');\nvar bleDriver = require('ble113a');\n\nbluetooth = bleDriver.use(blePort, function(err) {\n  if (err) {\n    return console.log(\"Failed to connect\", err);\n  }\n  else {\n    // Connect to moosh\n    connectToMoosh(function(moosh) {\n      // Tell the meter to start reading, pass back char to read\n      setMeterSettings(moosh, function(meterSample) {\n        // Start reading that char\n        startReadingMeter(meterSample);\n      });\n    });\n  }\n});\n\nfunction startReadingMeter(meterSample) {\n\n    meterSample.on('notification', function(value) {\n      var voltage = 0;\n      for (var i = 0; i < 3; i++) {\n        voltage += value[3+i] << (i*8);\n      }\n      voltage = (0x1000000 - voltage) * (1.51292917e-04);\n\n      console.log(\"Voltage\", voltage);\n    });\n\n    console.log(\"Turning on async readings...\");\n    meterSample.startNotifications();\n}\n\nfunction setMeterSettings(mooshimeter, callback) {\n  if (mooshimeter) {\n    // Find the characteristic with meter settings\n    console.log(\"Searching for characteristics...\");\n    mooshimeter.discoverCharacteristics(['ffa2', 'ffa6'], function(err, characteristics) {\n\n      console.log(\"Characteristics Found.\");\n      var meterSample = characteristics[0];\n      var meterSettings = characteristics[1];\n\n      // Update meter settings struct to start reading...\n      console.log(\"Turning on analog reads\");\n      meterSettings.write(new Buffer([3, 2, 0, 0, 0, 0, 0, 0, 23]), function(err, valueWritten) {\n        console.log(\"Turned on!\");\n        callback && callback(meterSample);\n      });\n    });\n  }\n}\n\nfunction connectToMoosh(callback) {\n\n  bluetooth.startScanning({serviceUUIDs:['ffa0']});\n\n  bluetooth.once('discover', function(moosh) {\n    bluetooth.stopScanning(function(stopError) {\n      moosh.connect(function(connectError) {\n        callback && callback(moosh);\n      })\n    })\n  });\n}\n```\n\n### Peripheral - Updating multiple characteristics\n```js\nvar tessel= require('tessel');\nvar blePort = tessel.port('a');\nvar accelPort = tessel.port('b');\nvar ambientPort = tessel.port('c');\n\nvar ble;\nvar accel;\nvar ambient;\n\n// Connect to BLE\nble = require('ble-ble113a').use(blePort, function(err) {\n  // Connect to Accel\n  accel = require('accel-mma84', function(err) {\n    // Connect to ambient\n    ambient = require('ambient-attx4', function(err) {\n      // start adveristing to any listening masters\n      ble.startAdvertising();\n    });\n  });\n});\n\n// Once a master connects\nble.on('ready', function(master) {\n  // Start streaming light data\n  ambient.on('light', function(lightValues) {\n    // Save it to the first available characteristic\n    ble.writeLocalValue(0, lightValues);\n  });\n  \n  // Start streaming sound data\n  ambient.on('sound', function(soundValues) {\n    // Save it to the next available characteristic\n    ble.writeLocalValue(1, soundValues);\n  });\n  \n  // Start streaming accelerometer data\n  accel.on('data', function(accelValues) {\n    // Save it to the next available characteristic\n    ble.writeLocalValue(2, accelValues);\n  });\n});\n\n```\n## API \n\n## Bluetooth (Primary Controller)\n\n### Master Commands\n\n```js\nvar tessel = require('tessel');\nvar bluetooth = require('ble-ble113a').use(tessel.port('a'));\n\n// Start searching for BLE peripherals (options dict is... optional)\nbluetooth.startScanning([options], function(err) {...} );\n// allowed options are:\n/*\noptions = \n{\n  // Boolean of whether duplicate peripherals should be reported\n  allowDuplicates:true/false,\n  // An array of uuids that, if existing in advertising data, will cause peripheral to be reported as discovered\n  serviceUUIDs:['ffa0']\n}\n*/\n// Stop Searching for BLE peripherals\nbluetooth.stopScanning( function(err) {...} );\n\nbluetooth.connect( peripheral, function(err) {...} );\n\nbluetooth.disconnect( peripheral, function(err) {..} );\n\n// Search for specific Services by passing in array of uuids. Returns array of Service objects\nbluetooth.discoverServices( peripheral, [serviceUUIDs], function(err, services) {...} );\n\n// Search for all Services of a peripheral. Returns array of Service objects\nbluetooth.discoverAllServices( peripheral, function(err, services) {...} );\n\n// Find what services are included in this service, if any (pretty rare)\nbluetooth.discoverIncludedServices( periphreal, serviceUUID, function(err, includedServices) {...} );\n\n// Search for specific Characteristics by passing in array of uuids. Returns array of Characteristic objects\nbluetooth.discoverCharacteristics( peripheral, [characteristicsUUIDs], function(err, characteristics) {...} );\n\n// Search for all Characterisitcs of a peripheral. Returns array of Charateristic objects\nbluetooth.discoverAllCharacteristics( peripheral, function(err, characteristics) {...} );\n\n// Return all services and characteristics of a peripheral. Returns \nbluetooth.discoverAllServicesAndCharacteristics( peripheral, function(err, results) {...} );\n\n// Discover specific UUIDs of a service\nbluetooth.discoverCharacteristicsOfService( service, [characteristicUUIDs], function(err, characteristics) {...} );\n\n// Discover the characteristics of a specific service\nbluetooth.discoverAllCharacteristicsOfService( service, function(err, characteristics) {...} );\n\n// Discover the descriptors of a specific service\nbluetooth.discoverDescriptorsOfCharacteristic( characteristic, function(err, descriptors) {...} );\n\n// Read all the services, characteristics, and descriptors of a peripheral\nbluetooth.discoverAllAttributes( peripheral, function(err, attributes) {...} );\n\n// Get the value of a remote characteristic\nbluetooth.read( characteristic, function(err, value) {...} );\n\n// Write the value of a remote characteristic. Value should be a buffer\nbluetooth.write( characteristic, value, function(err) {...} );\n\n// Get the value of a remote descriptor\nbluetooth.readDescriptor( descriptor, function(err, value) {...} );\n\n// Get the value of a remote descriptor\nbluetooth.writeDescriptor( descriptor, value function(err) {...} );\n\n// Subscribe to remote characteristic updates without having to indicate it was received\nbluetooth.startNotifications( characteristic, function(err) {...} );\n\n// stop being notified about remote characteristic updates\nbluetooth.stopNotifications( characteristic, function(err) {...} );\n\n// Subscribe to remote characteristic updates and indicate it was received\nbluetooth.startIndications( characteristic, function(err) {...} );\n\n// Stop receiving remote characteristic updates and indicate it was received\nbluetooth.stopIndications( characteristic, function(err) {...} );\n\n// Get signal strength of peripheral that we're conneted to\nbluetooth.updateRSSI( peripheral, function(err, rssi) {...} );\n\n// Reset the module (useful in case of unexpected state)\nbluetooth.reset( function(err) {...} );\n\n```\n\n### Master Events\n\n```js\nbluetooth.on( 'error', function(err) {...} );\n\nbluetooth.on( 'scanStart', function() {...} );\n\nbluetooth.on( 'scanStop', function() {...} );\n\nbluetooth.on( 'discover', function(peripheral) {...} );\n\nbluetooth.on( 'connect', function(peripheral) {...} );\n\nbluetooth.on( 'disconnect', function(peripheral, reason) {...} );\n\nbluetooth.on( 'servicesDiscover', function(services) {...} );\n\nbluetooth.on( 'characteristicsDiscover', function(characteristics) {...} );\n\nbluetooth.on( 'descriptorsDiscover', function(descriptors) {...} );\n\nbluetooth.on( 'characteristicRead', function(characteristicRead, valueRead) {...} );\n\nbluetooth.on( 'characteristicWrite', function(characteristicWritten, valueWritten) {...} );\n\nbluetooth.on( 'descriptorRead', function(descriptorRead, valueRead) {...} );\n\nbluetooth.on( 'descriptorWrite', function(descriptorWritten, valueWritten) {...} );\n\nbluetooth.on( 'notification', function(characteristic, valueUpdated) {...} );\n\nbluetooth.on( 'indication', function(characteristic, valueUpdated) {...} );\n\nbluetooth.on( 'rssiUpdate', function(peripheral, rssi) {...} );\n```\n\n### Slave Commands\n\n```js\n// Begin advertising to master devices\nbluetooth.startAdvertising( function(err) {...} );\n\n// Stop advertising\nbluetooth.stopAdvertising( function(err) {...} );\n\n// Set the data the master receives in advertising packet\nbluetooth.setAdvertisingData( data, function(err) {...} );\n\n// Write a local value to be read by a master\nbluetooth.writeLocalValue( index, data, function(err) {...} );\n\n// Read local values that have been written. Offset is how many bytes in to read (reads in 32 byte chunks max)\nbluetooth.readLocalValue( index, offset, function(err, value) {...} );\n\n// If a master device requests to read a \"user\" attribute, you'll need to manually send it to them\n// This should be called after the \"remoteReadRequest\" event. If errorCode is zero, it will send \n// the value, else it will send the errocode back\nbluetooth.sendReadResponse( connection, errorCode, value, function(err) {...} );\n\n// Get max number of values (V1.0.1 is 12)\nbluetooth.maxNumValues( function(err, maxNumValues) {...} );\n\n```\n### Slave Events\n```js\nbluetooth.on( 'startAdvertising', function() {...} );\n\nbluetooth.on( 'stopAdvertising', function() {...} );\n\nbluetooth.on( 'connect', function(connection) {...} );\n\nbluetooth.on( 'disconnect', function(connection, reason) {...} );\n\nbluetooth.on( 'remoteWrite', function(connection, index, valueWritten) {...} );\n\nbluetooth.on( 'remoteReadRequest', function(connection, index) {...} );\n\nbluetooth.on( 'remoteNotification', function(index) {...} );\n\nbluetooth.on( 'remoteIndication', function(index) {...} );\n\nbluetooth.on( 'remoteUpdateStop', function(index) {...} );\n\nbluetooth.on( 'indicated', function(connection, index) {...} );\n\n```\n\n### Hardware\n```js\n\n// Make a new I2C port on the BLE hardware\nbleI2C = bluetooth.I2C( address );\n\n// Transfer data over I2C\nbleI2C.transfer( txbuf, rxLen, function(err, rxbuf) {...} );\n\n// Receive data over I2C\nbleI2C.receive( len, function(err, rxbuf) {...} );\n\n// Send data over I2C\nbleI2C.send( txbuf, function(err) {...} );\n\n// Get one of the two GPIO ports (pin must be 'p0_2' or 'p0_3')\nvar bleGPIO = bluetooth.gpio( pin );\n\n// Configured as input or output\nbleGPIO.direction;\n\n// Set as an input\nbleGPIO.setInput( function(err) {...} );\n\n// Set as an output with initial value\nbleGPIO.setOutput( initial, function(err) {...} );\n\n// Write a value to the gpio port\nbleGPIO.write( value, function(err) {...} );\n\n// Read a value \nbleGPIO.read( function(err, value) {...} );\n\n// Watch one of the GPIOs for an interrupt\nbleGPIO.watch( type, function(err, time, type) {...} );\n\n// Stop watching the interrupt\nbleGPIO.unwatch( [type], callback );\n\n// Read the ADC\nbluetooth.readADC( function(err, value) {...} );\n```\n\n### Security (Probably needs revision)\n\n```js\n// Set whether a peripheral can be bonded to (not sure if this pertains to master mode as well)\nbluetooth.setBondable(peripheral, bondable, function(err) {...} );\n\n// Get bonds with current devices\nbluetooth.getBonds(function(err, bonds) {...} );\n\n// Delete any bonds with devices\nbluetooth.deleteBonds( peripheral, function(err) {...} );\n\n// Start the encyrption process\nbluetooth.startEncryption( peripheral, function(err) {...} );\n\n// When a remote requests a passkey, you'll need to enter it\nbluetooth.enterPasskey( peripheral, function(err) {...} );\n\n// Set the size of the encryption key\nbluetooth.setEncryptionKeySize( keysize, function(err) {...} );\n\n// Set the out of band data\nbluetooth.setOOBData( data, function(err) {...} );\n\n// Choose whether to enable or disable MITM protection\nbluetooth.enableMITMProtection( enable, function(err) {...} );\n```\n\n### System\n```js\n// Get the current address of the device\nbluetooth.getBluetoothAddress( function(err, address) {...} );\n\n// Get how many connections are supported by the module (currently at 4)\nbluetooth.getMaxConnections(function(err, maxConnections) {...} );\n\n// Reset the module\nbluetooth.reset( function(err) {...} );\n```\n\n## Object Functions\n### Peripheral Properties\n```js\nperipheral.rssi;\nperipheral.services;\nperipheral.characteristics;\nperipheral.advertisingData;\nperipheral.address;\nperipheral.connection;\nperipheral.flags;\n```\n\n### Peripheral Commands\n\n```js\n// Connect to a peripheral as a master\nperipheral.connect( function(err) {...} );\n\n// Disconnected from a peripheral as a master\nperipheral.disconnect( function(err) {...} );\n\n// Get the peripheral's signal strength\nperipheral.updateRSSI( function(err, rssi) {...} );\n\n// Discover a subset of the peripheral's services\nperipheral.discoverServices( uuids, function(err, services) {...} );\n\n// Discover all the peripheral's services\nperipheral.discoverAllServices( function(services) {...} );\n\n// Disocver all the services and characteristics of a peripheral\nperipheral.discoverAllServicesAndCharacteristics( uuids, function(err, results) {...} );\n\n// Discover specific characteristics of a peripheral\nperipheral.discoverCharacteristics( uuids, function(err, characteristics) {..} );\n\n// Discover all services, characteristics, and descriptors\nperipheral.discoverAllAttributes( function(err, attributes) {...} );\n\n// Delete bonding data from peripheral\nperipheral.deleteBond( function(err) {...} );\n\n// Make connection encrypted with device\nperipheral.startEncryption( function(err) {...} );\n\n// Enter passkey for bonding\nperipheral.enterPasskey( function(err) {...} );\n\n// print out the peripheral's data\nperipheral.toString();\n\n```\n\n### Peripheral Events\n```js\n\nperipheral.on( 'connect', function() {...} );\n\nperipheral.on( 'disconnect', function(reason) {...} );\n\nperipheral.on( 'servicesDiscover', function(services) {...} );\n\nperipheral.on( 'characteristicsDiscover', function(characteristics) {...} );\n\nperipheral.on( 'descriptorsDiscover', function(descriptors) {...} );\n\nperipheral.on( 'characteristicRead', function(characteristic, value) {...} );\n\nperipheral.on( 'characteristicWrite', function(characteristic, value) {...} );\n\nperipheral.on( 'descriptorRead', function(characteristic, value) {...} );\n\nperipheral.on( 'descriptorWrite', function(characteristic, value) {...} );\n\nperipheral.on( 'notification', function(characteristic, valueUpdated) {...} );\n\nperipheral.on( 'indication', function(characteristic, valueUpdated) {...} );\n\nperipheral.on( 'rssiUpdate', function(rssi) {...} );\n\n```\n### Service Properties\n```js\nservice.uuid\nservice.handle\nservice.name\nservice.type\nservice.characteristics\nservice.includedServices\n```\n### Service Commands\n\n```js\n// Discover what other sercices are included by this one\nservice.discoverIncludedServices( function(err, includedServices) {...} ) ;\n\n// Discover the characteristics in this service\nservice.discoverAllCharacteristics( function(err, characteristics) {...} );\n\nservice.discoverCharacteristics( [characteristicUUIDs], function(err, characteristics) {...} );\n\n// Print out the service\nservice.toString();\n```\n\n### Service Events\n\n```js\n\nservice.on( 'discoverIncludedServices', function(includedServices) {...} );\n\nservice.on( 'characteristicsDiscover', function(characteristics) {...} );\n```\n\n### Characteristic Properties\n```js\ncharacteristic.uuid\ncharacteristic.handle\ncharacteristic.name\ncharacteristic.type\ncharacteristic.descriptors\ncharacteristic.value\n```\n### Characteristic Commands\n```js\n// Gather all descriptors for a characteristic\ncharacteristic.discoverAllDescriptors( function(err, descriptors) {...} );\n\n// Read the value of a characteristic\ncharacteristic.read( function(err, value) {...} );\n\n// Write the value of a characteristic\ncharacteristic.write( value, function(err) {...} );\n\n// Subscribe to async notifications \ncharacteristic.startNotifications( function(err, value) {...} );\n\n// Unsubscribe to async notifications \ncharacteristic.disableNotifications( listener, function(err) {...} );\n\n// Subscribe to indications (same as notification except you must indicate received)\ncharacteristic.startIndications( function(err) {...} );\n\n// Unsubscribe from indications \ncharacteristic.stopIndications( function(err) {...} );\n\n// Tell remote you received indication (same as notification except you must indicate received)\ncharacterstic.confirmIndication(function(err) {...} );\n\n// Print out the characteristic\ncharacteristic.toString();\n```\n\n### Characteristic Events\n```js\n\ncharacteristic.on( 'characteristicRead', function(valueRead) {...} );\n\ncharacteristic.on( 'characteristicWrite', function(valueWritten) {...} );\n\ncharacteristic.on( 'discoverDescriptors', function(descriptors) {...} );\n\ncharacteristic.on( 'notification', function(data) {...} );\n\ncharacteristic.on( 'indication', function(data) {...} );\n```\n### Descriptor Properties\n```js\ndescriptor.uuid\ndescriptor.handle\ndescriptor.name\ndescriptor.type\ndescriptor.value\n```\n\n### Descriptor Commands\n```js\n// Read the value of a descriptor\ndescriptor.read( function(err, value) {...} );\n\n// Write the value of a descriptor\ndescriptor.write( value, function(err) {...} );\n\n// Print out the descriptor\ndescriptor.toString();\n```\n\n### Descriptor Events\n```js\n\ndescriptor.on('descriptorRead', function(valueRead) {...} );\n\ndescriptor.on('descriptorWrite', function(valuewritten) {...} );\n```\n\n## License\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/tessel/beta/issues"
  },
  "homepage": "https://github.com/tessel/beta",
  "_id": "ble-ble113a@0.0.28",
  "_from": "ble-ble113a@~0.0.27"
}
